# Python package
# Build and test a Python package on multiple Python versions and Platforms.
name: Build and Test Python Pipeline

pr:
- master
- develop
- release/*
- hotfix/*

trigger: none

strategy:
  matrix:
    linux-Python3.6:
      imageName: 'ubuntu-latest'
      pythonVersion: '3.6'
    mac-Python3.6:
      imageName: 'macos-latest'
      pythonVersion: '3.6'
    windows-Python3.6:
      imageName: 'windows-latest'
      pythonVersion: '3.6'

pool:
  vmImage: $(imageName)
  
steps:
  
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(pythonVersion)'
  displayName: 'Use Python $(pythonVersion)'

- script: |
    python -m pip install --upgrade pip
    pip install pylint
    pip install unittest-xml-reporting
    pip install coverage
    pip install parameterized
    pip install requests-mock
    pip install flask
  displayName: 'Install dependencies'

- script: |
    pip install ./fiftyone_pipeline_cloudrequestengine
    pip install ./fiftyone_pipeline_core
    pip install ./fiftyone_pipeline_engines
    pip install ./fiftyone_pipeline_engines_fiftyone
  displayName: 'Install Python Packages'

- script: |
    cd ./fiftyone_pipeline_cloudrequestengine
    pylint --rcfile=.pylintrc ./fiftyone_pipeline_cloudrequestengine
    
    cd ../fiftyone_pipeline_core
    pylint --rcfile=.pylintrc ./fiftyone_pipeline_core
    
    cd ../fiftyone_pipeline_engines
    pylint --rcfile=.pylintrc ./fiftyone_pipeline_engines
    
    cd ../fiftyone_pipeline_engines_fiftyone
    pylint --rcfile=.pylintrc ./fiftyone_pipeline_engines_fiftyone   
  displayName: 'Analyze Python Code Using Pylint'
    
- script: |
    cd ./fiftyone_pipeline_cloudrequestengine
    coverage run -m xmlrunner discover -s tests -p test*.py -o test-results
    coverage xml
    cd ../fiftyone_pipeline_core
    coverage run -m xmlrunner discover -s tests -p test*.py -o test-results
    coverage xml
    cd ../fiftyone_pipeline_engines
    coverage run -m xmlrunner discover -s tests -p test*.py -o test-results
    coverage xml
  displayName: 'Run Tests'
 
- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testRunner: JUnit
    testResultsFiles: '**/test-results/**'
    testRunTitle: 'Publish test results for Python $(pythonVersion)'
    searchFolder: '$(System.DefaultWorkingDirectory)'
    mergeTestResults: false
    failTaskOnFailedTests: true

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
    reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'

