# build and test stage template

parameters:
# Here is the description of the parameters.
# stageName: Stage name
# imageName: image on which stage needs to be run
# architecture: OS architecture i.e. x86, x64
- name: stageName
- name: imageName
- name: architecture
- name: runTests
  type: string
  default: 'On'

stages:
- stage: ${{ parameters.stageName }}
  dependsOn: []

  jobs:
  - job: Build_and_Test
    displayName: Build and Test
    condition: ne(${{ parameters.runTests }}, 'Off')
  
    strategy:
      matrix:
        Python 37:
          pythonVersion: '3.7'
        Python 38:
          pythonVersion: '3.8'
        Python 39:          
          pythonVersion: '3.9'

    variables: 
      - group: InternalKeys
      
    pool:
      vmImage: ${{ parameters.imageName }}
      
    steps:
      
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
        architecture: ${{ parameters.architecture }}
      displayName: 'Use Python $(pythonVersion)'

    - script: |
        python -m pip install --upgrade pip
        pip install pylint
        pip install unittest-xml-reporting
        pip install coverage
        pip install parameterized
        pip install requests-mock
        pip install flask
      displayName: 'Install dependencies'

    - script: |
        pip install ./fiftyone_pipeline_cloudrequestengine
        pip install ./fiftyone_pipeline_core
        pip install ./fiftyone_pipeline_engines
        pip install ./fiftyone_pipeline_engines_fiftyone
      displayName: 'Install Python Packages'

    - bash: |
        cd ./fiftyone_pipeline_cloudrequestengine
        pylint --rcfile=.pylintrc ./fiftyone_pipeline_cloudrequestengine
        if [ $? -ne 0 ]; then
          echo "Failed to run pylint on fiftyone_pipeline_cloudrequestengine."
          exit 1
        fi

        cd ../fiftyone_pipeline_core
        pylint --rcfile=.pylintrc ./fiftyone_pipeline_core
        if [ $? -ne 0 ]; then
          echo "Failed to run pylint on fiftyone_pipeline_core."
          exit 1
        fi

        cd ../fiftyone_pipeline_engines
        pylint --rcfile=.pylintrc ./fiftyone_pipeline_engines
        if [ $? -ne 0 ]; then
          echo "Failed to run pylint on fiftyone_pipeline_engines."
          exit 1
        fi

        cd ../fiftyone_pipeline_engines_fiftyone
        pylint --rcfile=.pylintrc ./fiftyone_pipeline_engines_fiftyone
        if [ $? -ne 0 ]; then
          echo "Failed to run pylint on fiftyone_pipeline_engines_fiftyone."
          exit 1
        fi   
      displayName: 'Analyze Python Code Using Pylint'
      failOnStderr: true
        
    - bash: |
    
        export resource_key="$(SuperResourceKey)"      
        echo 'Exporting resource key for cloud tests, resource_key=$(SuperResourceKey)'
        
        cd ./fiftyone_pipeline_cloudrequestengine
        coverage run -m xmlrunner discover -s tests -p test*.py -o test-results
        if [ $? -ne 0 ]; then
          echo "Failed to run test cases and coverage for fiftyone_pipeline_cloudrequestengine."
          exit 1
        fi
        cp .coverage ../.coverage.cre
        
        cd ../fiftyone_pipeline_core
        coverage run -m xmlrunner discover -s tests -p test*.py -o test-results
        if [ $? -ne 0 ]; then
          echo "Failed to run test cases and coverage for fiftyone_pipeline_core."
          exit 1
        fi  
        cp .coverage ../.coverage.core
        
        cd ../fiftyone_pipeline_engines
        coverage run -m xmlrunner discover -s tests -p test*.py -o test-results
        if [ $? -ne 0 ]; then
          echo "Failed to run test cases and coverage for fiftyone_pipeline_engines."
          exit 1
        fi  
        cp .coverage ../.coverage.engines
        cd ..
        coverage combine 
        coverage xml
      displayName: 'Run Tests'
     
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: JUnit
        testResultsFiles: '**/test-results/**'
        testRunTitle: '${{ parameters.imageName }}-${{ parameters.architecture }}-$(pythonVersion)'
        searchFolder: '$(System.DefaultWorkingDirectory)'
        mergeTestResults: false
        failTaskOnFailedTests: true

    - task: PublishCodeCoverageResults@1
      condition: succeeded()
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage.xml'

